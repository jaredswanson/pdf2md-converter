#!/usr/bin/env python3

import argparse
import os
import json
from pathlib import Path
import PyPDF2
import ollama

CONFIG_FILE = 'pdf2md_config.json'
DEFAULT_MODEL = 'gemma2:9b'

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return {'model': DEFAULT_MODEL}

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def read_pdf(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ''
        for page in reader.pages:
            text += page.extract_text()
    return text

def convert_to_markdown(text, model):
    prompt = f"Convert the following text to well-formatted Markdown:\n\n{text}"
    response = ollama.generate(model=model, prompt=prompt)
    return response['response']

def save_markdown(markdown, output_path):
    with open(output_path, 'w', encoding='utf-8') as file:
        file.write(markdown)

def main():
    config = load_config()

    parser = argparse.ArgumentParser(description='Convert PDF to Markdown using ollama.')
    parser.add_argument('pdf_file', help='Path to the input PDF file')
    parser.add_argument('-o', '--output', help='Output directory (default: current directory)')
    parser.add_argument('-m', '--model', help=f'Ollama model to use (default: {config["model"]})')
    args = parser.parse_args()

    if args.model:
        config['model'] = args.model
        save_config(config)

    pdf_path = Path(args.pdf_file)
    if not pdf_path.exists():
        print(f"Error: PDF file '{pdf_path}' not found.")
        return

    output_dir = args.output if args.output else os.getcwd()
    output_path = Path(output_dir) / f"{pdf_path.stem}.md"

    try:
        pdf_text = read_pdf(pdf_path)
        markdown_text = convert_to_markdown(pdf_text, config['model'])
        save_markdown(markdown_text, output_path)
        print(f"Markdown file saved: {output_path}")
        print(f"Used model: {config['model']}")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == '__main__':
    main()
